// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new series API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for series API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSeriesID Returns a series records that contains all information known about a particular series id.
*/
func (a *Client) GetSeriesID(params *GetSeriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesID",
		Method:             "GET",
		PathPattern:        "/series/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDOK), nil

}

/*
GetSeriesIDActors Returns actors for the given series id
*/
func (a *Client) GetSeriesIDActors(params *GetSeriesIDActorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDActorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDActorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDActors",
		Method:             "GET",
		PathPattern:        "/series/{id}/actors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDActorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDActorsOK), nil

}

/*
GetSeriesIDEpisodes All episodes for a given series. Paginated with 100 results per page.
*/
func (a *Client) GetSeriesIDEpisodes(params *GetSeriesIDEpisodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDEpisodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDEpisodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDEpisodes",
		Method:             "GET",
		PathPattern:        "/series/{id}/episodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDEpisodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDEpisodesOK), nil

}

/*
GetSeriesIDEpisodesQuery This route allows the user to query against episodes for the given series. The response is a paginated array of episode records that have been filtered down to basic information.
*/
func (a *Client) GetSeriesIDEpisodesQuery(params *GetSeriesIDEpisodesQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDEpisodesQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDEpisodesQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDEpisodesQuery",
		Method:             "GET",
		PathPattern:        "/series/{id}/episodes/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDEpisodesQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDEpisodesQueryOK), nil

}

/*
GetSeriesIDEpisodesQueryParams Returns the allowed query keys for the `/series/{id}/episodes/query` route
*/
func (a *Client) GetSeriesIDEpisodesQueryParams(params *GetSeriesIDEpisodesQueryParamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDEpisodesQueryParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDEpisodesQueryParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDEpisodesQueryParams",
		Method:             "GET",
		PathPattern:        "/series/{id}/episodes/query/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDEpisodesQueryParamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDEpisodesQueryParamsOK), nil

}

/*
GetSeriesIDEpisodesSummary Returns a summary of the episodes and seasons available for the series.

__Note__: Season "0" is for all episodes that are considered to be specials.
*/
func (a *Client) GetSeriesIDEpisodesSummary(params *GetSeriesIDEpisodesSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDEpisodesSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDEpisodesSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDEpisodesSummary",
		Method:             "GET",
		PathPattern:        "/series/{id}/episodes/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDEpisodesSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDEpisodesSummaryOK), nil

}

/*
GetSeriesIDFilter Returns a series records, filtered by the supplied comma-separated list of keys. Query keys can be found at the `/series/{id}/filter/params` route.
*/
func (a *Client) GetSeriesIDFilter(params *GetSeriesIDFilterParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDFilter",
		Method:             "GET",
		PathPattern:        "/series/{id}/filter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDFilterOK), nil

}

/*
GetSeriesIDFilterParams Returns the list of keys available for the `/series/{id}/filter` route
*/
func (a *Client) GetSeriesIDFilterParams(params *GetSeriesIDFilterParamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDFilterParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDFilterParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDFilterParams",
		Method:             "GET",
		PathPattern:        "/series/{id}/filter/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDFilterParamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDFilterParamsOK), nil

}

/*
GetSeriesIDImages Returns a summary of the images for a particular series
*/
func (a *Client) GetSeriesIDImages(params *GetSeriesIDImagesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDImages",
		Method:             "GET",
		PathPattern:        "/series/{id}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDImagesOK), nil

}

/*
GetSeriesIDImagesQuery Query images for the given series ID.
*/
func (a *Client) GetSeriesIDImagesQuery(params *GetSeriesIDImagesQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDImagesQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDImagesQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDImagesQuery",
		Method:             "GET",
		PathPattern:        "/series/{id}/images/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDImagesQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDImagesQueryOK), nil

}

/*
GetSeriesIDImagesQueryParams Returns the allowed query keys for the `/series/{id}/images/query` route. Contains a parameter record for each unique `keyType`, listing values that will return results.
*/
func (a *Client) GetSeriesIDImagesQueryParams(params *GetSeriesIDImagesQueryParamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSeriesIDImagesQueryParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIDImagesQueryParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSeriesIDImagesQueryParams",
		Method:             "GET",
		PathPattern:        "/series/{id}/images/query/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSeriesIDImagesQueryParamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIDImagesQueryParamsOK), nil

}

/*
HeadSeriesID Returns header information only about the given series ID.
*/
func (a *Client) HeadSeriesID(params *HeadSeriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*HeadSeriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadSeriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HeadSeriesID",
		Method:             "HEAD",
		PathPattern:        "/series/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HeadSeriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HeadSeriesIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
